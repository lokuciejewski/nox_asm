// This file is meant to be parsed fully by the assembler. It serves as the initial test if all syntax is implemented properly. 
// That's why there are some values used as examples:
// - all 8-bit hexes are replaced with 0xff
// - all 16-bit hexes are replaced with &0x1234
//
// `label` represents any label that has been declared in a file
//
// all values should be hexadecimal and preceeded by `0x`, eg. 0xdead, 0x2133, 0xab
// <8HEX> = 8-bit hex
// <16HEX> = 16-bit hex
//
// &<16HEX> denotes an address and is always interchangeable with `label`
// &HLI denotes indirect addressing, eg. PUSH &HLI A pushes value at address in HLI into A
//
// `//` - double slash is comment
// `<any_text>:` denotes a label in this place
// `> 0x1500` will place any following code starting from 0x1500
// 
// the combination:
// > 0xabba
// label:
// 
// ensures the label has the value of the address delimiter
//
// `$` - denotes a data stored in memory
// $ "HELLO" - denotes a zero-terminated ascii string
//
// text:
// $ "THIS IS A TEXT" - denotes a zero-terminated ascii string accessible by using label "text"
// $ 0xaa 0xbb 0xcc 0xdd 0xee 0xff - denotes some bytes in memory after this symbol
// 
// NOOP
NOOP

// PUSH_IMMEDIATE_A  
PUSH 0xff A
// PUSH_ABSOLUTE_A  
PUSH &0x1234 A  
PUSH label A 
// PUSH_A_B
PUSH A B
// PUSH_IMMEDIATE_B    
PUSH 0xff B
// PUSH_ABSOLUTE_B 
PUSH &0x1234 B
PUSH label B
// PUSH_B_A
PUSH B A
// PUSH_HI_A
PUSH HI A
// PUSH_HI_B
PUSH HI B
// PUSH_LI_A
PUSH LI A
// PUSH_LI_B
PUSH LI B
// PUSH_EXIT_CODE_A
PUSH EX A
// PUSH_EXIT_CODE_B
PUSH EX B
// PUSH_IMMEDIATE_HI
PUSH 0xff HI
// PUSH_ABSOLUTE_HI
PUSH &0x1234 HI
PUSH label HI
// PUSH_IMMEDIATE_LI
PUSH 0xff LI
// PUSH_ABSOLUTE_LI
PUSH &0x1234 LI
PUSH label LI
// PUSH_IMMEDIATE_AB
PUSH 0x1234 AB
// PUSH_ABSOLUTE_AB
PUSH &0x1234 AB
PUSH label AB
// PUSH_HLI_AB
PUSH HLI AB
// PUSH_IMMEDIATE_HLI
PUSH 0x1234 HLI
// PUSH_ABSOLUTE_HLI
PUSH &0x1234 HLI
PUSH label HLI
// PUSH_STACK_ADDRESS_AB  // Push `stack_address` to AB, set ZERO flag accordingly
PUSH SA AB
// PUSH_STACK_SIZE_AB     // Push `stack_size` to AB, set ZERO flag accordingly
PUSH SS AB
// PUSH_A_STACK           // push value(s) from A to stack IMMEDIATE value times
PUSH A S
// PUSH_B_STACK           // push value(s) from B to stack IMMEDIATE value times
PUSH B S
// PUSH_HI_STACK          // push HI to stack
PUSH HI S
// PUSH_LI_STACK          // push LI to stack
PUSH LI S
// PUSH_INDIRECT_A
PUSH &HLI A 
// PUSH_INDIRECT_B
PUSH &HLI B 
// PUSH_INDIRECT_AB
PUSH &HLI AB 



// POP_A_ABSOLUTE  
POP A &0x1234
POP A label
// POP_A_HI
POP A HI
// POP_A_LI   
POP A LI
// POP_B_ABSOLUTE  
POP B &0x1234
POP B label
// POP_B_HI
POP B HI
// POP_B_LI
POP B LI
// POP_AB_STACK_ADDRESS   // Pop value from AB to `stack_address`, setting `stack_pointer` to the same value. This effectively resets the stack, preventing any `RETURN`s from working!
POP AB SA
// POP_AB_STACK_SIZE      // Pop value from AB to `stack_size`. Can be used to increase stack size on the fly, as it does not reset the stack.
POP AB SS
// POP_AB_IRQ
POP AB IRA  // InteRrupt Address
// POP_A_STACK            // pop value(s) from stack to A IMMEDIATE value times
POP A S
// POP_B_STACK            // pop value(s) from stack to B IMMEDIATE value times
POP B S
// POP_HI_STACK           // pop HI from stack
POP HI S
// POP_LI_STACK           // pop LI from stack
POP LI S
// POP_AB_ABSOLUTE
POP AB &0x1234
POP AB label
// POP_AB_HLI
POP AB HLI
// POP_A_INDIRECT
POP A &HLI
// POP_B_INDIRECT
POP B &HLI
// POP_AB_INDIRECT
POP AB &HLI



// PEEK_A_ABSOLUTE
PEEK A &0x1234
PEEK A label
// PEEK_B_ABSOLUTE
PEEK B &0x1234
PEEK B label
// PEEK_AB_ABSOLUTE
PEEK AB &0x1234
PEEK AB label
// PEEK_A_INDIRECT
PEEK A &HLI
// PEEK_B_INDIRECT
PEEK B &HLI
// PEEK_AB_INDIRECT
PEEK AB &HLI



// STORE_HI_ABSOLUTE
STO HI &0x1234
STO HI label
// STORE_LI_ABSOLUTE
STO LI &0x1234
STO LI label
// STORE_HLI_ABSOLUTE
STO HLI &0x1234
STO HLI label


// ADD_A_B            // A + B -> push to B
ADD A B
// ADD_IMMEDIATE_A    // A + IM -> push to A
ADD 0xff A
// ADD_ABSOLUTE_A
ADD &0x1234 A
ADD label A
// ADD_B_A            // A + B -> push to A
ADD B A
// ADD_IMMEDIATE_B    // B + IM -> push to B
ADD 0xff B
// ADD_ABSOLUTE_B
ADD &0x1234 B
ADD label B
// ADD_IMMEDIATE_AB
ADD 0x1234 AB
ADD label AB 
// ADD_ABSOLUTE_AB
ADD &0x1234 AB 
ADD label AB 



// SUB_A_B            // A - B -> push to B
SUB A B
// SUB_IMMEDIATE_A    // A - IM -> push to A
SUB 0xff A
// SUB_ABSOLUTE_A
SUB &0x1234 A
SUB label A
// SUB_B_A            // B - A -> push to A
SUB B A
// SUB_IMMEDIATE_B   // B - IM -> push to B
SUB 0xff B
// SUB_ABSOLUTE_B
SUB &0x1234 B
SUB label B
// SUB_IMMEDIATE_AB
SUB 0x1234 AB
// SUB_ABSOLUTE_AB
SUB &0x1234 AB
SUB label AB



// SHIFT_LEFT_A     // set first bit to 0
SHL A
// SHIFT_LEFT_B
SHL B
// SHIFT_LEFT_AB    // same as 8 bit shift
SHL AB



// SHIFT_RIGHT_A    // set last bit to 0
SHR A
// SHIFT_RIGHT_B
SHR B
// SHIFT_RIGHT_AB    
SHR AB



// AND_A_B    // A and B -> push to A
AND A B
// AND_B_A    // A and B -> push to B
AND B A
// AND_IMMEDIATE_AB   // same as 8 bit ops
AND 0x1234 AB
// AND_ABSOLUTE_AB
AND &0x1234 AB
AND label AB



// OR_A_B     // A or B -> push to A
OR A B
// OR_B_A     // A or B -> push to B
OR B A
// OR_IMMEDIATE_AB
OR 0x1234 AB
// OR_ABSOLUTE_AB
OR &0x1234 AB
OR label AB


// XOR_A_B     // A xor B -> push to A
XOR A B
// OR_B_A     // A xor B -> push to B
XOR B A
// XOR_IMMEDIATE_AB
XOR 0x1234 AB
// OR_ABSOLUTE_AB
XOR &0x1234 AB
XOR label AB



// NOT_A      // not A -> push to A
NOT A
// NOT_B      // not B -> push to B
NOT B
// NOT_AB
NOT AB



// CMP_A_B            // compare A and B: set ZERO if equal, set OVF if A > B, clear ZERO and OVF if A < B
CMP A B
// CMP_IMMEDIATE_A    // flags set same as above
CMP 0xff A
// CMP_ABSOLUTE_A
CMP &0x1234 A
CMP label A
// CMP_IMMEDIATE_B
CMP 0xff B
// CMP_ABSOLUTE_B
CMP &0x1234 B
CMP label B
// CMP_IMMEDIATE_HI
CMP 0xff HI
// CMP_ABSOLUTE_HI
CMP &0x1234 HI
CMP label HI
// CMP_IMMEDIATE_LI
CMP 0xff LI
// CMP_ABSOLUTE_LI
CMP &0x1234 LI
CMP label LI
// CMP_IMMEDIATE_AB
CMP 0x1234 AB
// CMP_ABSOLUTE_AB
CMP &0x1234 AB
CMP label AB
// CMP_IMMEDIATE_HLI
CMP 0x1234 HLI
// CMP_ABSOLUTE_HLI
CMP &0x1234 HLI
CMP label HLI



// INC_HI
INC HI
// INC_LI         // Increment LI, set OVF if overflown, do not change HI, set ZERO if zeroed
INC LI
// INC_HLI
INC HLI



// DEC_HI
DEC HI
// DEC_LI         // Decrement LI, set OVF if overflown, do not change HI, set ZERO if zeroed
DEC LI
// DEC_HLI
DEC HLI



// ZERO_HI    // set HI to 0, do not set ZERO flag
ZERO HI
// ZERO_LI    // set LI to 0, do not set ZERO flag
ZERO LI
// ZERO_HLI   // set HI and LI to 0, do not set ZERO flag
ZERO HLI



// SWAP_HI_LI // no flags set
SWP HI LI
SWP LI HI // the same, just different syntax



// JUMP_IF_ZERO
JZE &0x1234
JZE label



// JUMP_IF_OVERFLOW
JOF &0x1234
JOF label



// JUMP_IF_ERROR
JER &0x1234
JER label



// JUMP_IF_OK
JOK &0x1234
JOK label



// JUMP
JMP &0x1234
JMP label



// CALL                   // push flags, index registers and current PC to stack and jump to specified address 
CALL &0x1234
CALL label



// RETURN_OK              // pop flags, set the OK flag (do not pop ERR/OK flags) and set EXIT_CODE to 0, pop index registers and PC from stack and resume from PC
RET OK
// RETURN_OK_EXIT_CODE    // same as above but set EXIT_CODE to IMMEDIATE value
RET OK 0xff
// RETURN_ERR             // pop flags, set the ERR flag (do not pop ERR/OK flags) and set EXIT_CODE to 0, pop index registers and PC from stack and resume from PC 
RET ERR
// RETURN_ERR_EXIT_CODE   // same as above but set EXIT_CODE to IMMEDIATE value
RET ERR 0xff



// SET_ERR
SET ERR
// SET_IRQ // Enable interrupts
SET IRQ



// CLEAR_EXIT_CODE
CLR EX
// CLEAR_ERR
CLR ERR
// CLEAR_IRQ // Disable interrupts
CLR IRQ
// CLEAR_OVF
CLR OVF
// CLEAR_ZERO
CLR ZER



// HALT           // halt execution
HALT