// <HEX> is always preceeded by `0x`, eg. 0xdead, 0x2133
// <8HEX> = 8-bit hex
// <16HEX> = 16-bit hex

// `//` - double slash is comment
// `<any_text>:` denotes a label in this place
// `> 0x1500` will place any following code starting from 0x1500
// 
// the combination:
// > 0xabba
// label:
// 
// ensures the label has the value of the address delimiter
//
// `$` - denotes a data stored in memory
// $ "HELLO" - denotes a zero-terminated ascii string
//
// text:
// $ "THIS IS A TEXT" - denotes a zero-terminated ascii string accessible by using label "text"
// $ 0xaa 0xbb 0xcc 0xdd 0xee 0xff - denotes some bytes in memory after this symbol

// NOOP
NOOP

// PUSH_A_IMMEDIATE  
PUSH A #<8HEX>
// PUSH_A_ABSOLUTE   
PUSH A <16HEX>  
// PUSH_A_B
PUSH A B
// PUSH_B_IMMEDIATE    
PUSH B #<8HEX>
// PUSH_B_ABSOLUTE  
PUSH B 16HEX
// PUSH_B_A
PUSH B A
// PUSH_HI_A
PUSH HI A
// PUSH_HI_B
PUSH HI B
// PUSH_LI_A
PUSH LI A
// PUSH_LI_B
PUSH LI B
// PUSH_EXIT_CODE_A
PUSH EX A
// PUSH_EXIT_CODE_B
PUSH EX B
// PUSH_HI_IMMEDIATE
PUSH HI #<8HEX>
// PUSH_HI_ABSOLUTE
PUSH HI <16HEX>
// PUSH_LI_IMMEDIATE
PUSH LI #<8HEX>
// PUSH_LI_ABSOLUTE
PUSH LI <16HEX>
// PUSH_AB_IMMEDIATE
PUSH AB #<16HEX>
// PUSH_AB_ABSOLUTE
PUSH AB <16HEX>
// PUSH_HLI_AB
PUSH HLI AB
// PUSH_HLI_IMMEDIATE
PUSH HLI #<16HEX>
// PUSH_HLI_ABSOLUTE
PUSH HLI <16HEX>
// PUSH_AB_STACK_ADDRESS  // Push `stack_address` to AB, set ZERO flag accordingly
PUSH AB SA
// PUSH_AB_STACK_SIZE     // Push `stack_size` to AB, set ZERO flag accordingly
PUSH AB SS
// PUSH_A_STACK           // push value(s) from A to stack IMMEDIATE value times
PUSH A S
// PUSH_B_STACK           // push value(s) from B to stack IMMEDIATE value times
PUSH B S
// PUSH_HI_STACK          // push HI to stack
PUSH HI S
// PUSH_LI_STACK          // push LI to stack
PUSH LI S



// POP_A_ABSOLUTE  
POP A <16HEX>
// POP_A_HI
POP A HI
// POP_A_LI   
POP A LI
// POP_B_ABSOLUTE  
POP B <16HEX>
// POP_B_HI
POP B HI
// POP_B_LI
POP B LI
// POP_AB_STACK_ADDRESS   // Pop value from AB to `stack_address`, setting `stack_pointer` to the same value. This effectively resets the stack, preventing any `RETURN`s from working!
POP AB SA
// POP_AB_STACK_SIZE      // Pop value from AB to `stack_size`. Can be used to increase stack size on the fly, as it does not reset the stack.
POP AB SS
// POP_AB_IRQ
POP AB IRA  // InteRrupt Address
// POP_A_STACK            // pop value(s) from stack to A IMMEDIATE value times
POP A S
// POP_B_STACK            // pop value(s) from stack to B IMMEDIATE value times
POP B S
// POP_HI_STACK           // pop HI from stack
POP HI S
// POP_LI_STACK           // pop LI from stack
POP LI S
// POP_AB_ABSOLUTE
POP AB <16HEX>
// POP_AB_HLI
POP AB HLI



// STORE_HI_ABSOLUTE
STO HI <16HEX>
// STORE_LI_ABSOLUTE
STO LI <16HEX>
// STORE_HLI_ABSOLUTE
STO HLI <16HEX>



// ADD_A_B            // A + B -> push to B
ADD A B
// ADD_A_IMMEDIATE    // A + IM -> push to A
ADD A #<8HEX>
// ADD_A_ABSOLUTE
ADD A <16HEX>
// ADD_B_A            // A + B -> push to A
ADD B A
// ADD_B_IMMEDIATE    // B + IM -> push to B
ADD B #<8HEX>
// ADD_B_ABSOLUTE
ADD B <16HEX>
// ADD_AB_IMMEDIATE
ADD AB #<16HEX>
// ADD_AB_ABSOLUTE
ADD AB <16HEX>



// SUB_A_B            // A - B -> push to B
SUB A B
// SUB_A_IMMEDIATE    // A - IM -> push to A
SUB A #<8HEX>
// SUB_A_ABSOLUTE
SUB A <16HEX>
// SUB_B_A            // B - A -> push to A
SUB B A
// SUB_B_IMMEDIATE    // B - IM -> push to B
SUB B #<8HEX>
// SUB_B_ABSOLUTE
SUB B <16HEX>
// SUB_AB_IMMEDIATE
SUB AB #<16HEX>
// SUB_AB_ABSOLUTE
SUB AB <16HEX>



// SHIFT_LEFT_A     // set first bit to 0
SHL A
// SHIFT_LEFT_B
SHL B
// SHIFT_LEFT_AB    // same as 8 bit shift
SHL AB
// SHIFT_RIGHT_A    // set last bit to 0



SHR A
// SHIFT_RIGHT_B
SHR B
// SHIFT_RIGHT_AB    
SHR AB



// AND_A_B    // A and B -> push to A
AND A B
// AND_B_A    // A and B -> push to B
AND B A
// AND_AB_IMMEDIATE   // same as 8 bit ops
AND AB #<16HEX>
// AND_AB_ABSOLUTE
AND AB <16HEX>



// OR_A_B     // A or B -> push to A
OR A B
// OR_B_A     // A or B -> push to B
OR B A
// OR_AB_IMMEDIATE
OR AB #<16HEX>
// OR_AB_ABSOLUTE
OR AB <16HEX>



// XOR_A_B    // A xor B -> push to A
XOR A B
// XOR_B_A    // A xor B -> push to B
XOR B A
// XOR_AB_IMMEDIATE
XOR AB #<16HEX>
// XOR_AB_ABSOLUTE
XOR AB <16HEX>



// NOT_A      // not A -> push to A
NOT A
// NOT_B      // not B -> push to B
NOT B
// NOT_AB
NOT AB



// CMP_A_B            // compare A and B: set ZERO if equal, set OVF if A > B, clear ZERO and OVF if A < B
CMP A B
// CMP_A_IMMEDIATE    // flags set same as above
CMP A #<8HEX>
// CMP_A_ABSOLUTE
CMP A <16HEX>
// CMP_B_IMMEDIATE
CMP B #<8HEX>
// CMP_B_ABSOLUTE
CMP B <16HEX>
// CMP_HI_IMMEDIATE   // same as CMP_A_B
CMP HI #<8HEX>
// CMP_HI_ABSOLUTE
CMP HI <16HEX>
// CMP_LI_IMMEDIATE
CMP LI #<8HEX>
// CMP_LI_ABSOLUTE
CMP LI <16HEX>
// CMP_AB_IMMEDIATE
CMP AB #<16HEX>
// CMP_AB_ABSOLUTE
CMP AB <16HEX>
// CMP_HLI_IMMEDIATE
CMP HLI #<16HEX>
// CMP_HLI_ABSOLUTE
CMP HLI <16HEX>



// INC_HI
INC HI
// INC_LI         // Increment LI, set OVF if overflown, do not change HI, set ZERO if zeroed
INC LI
// INC_HLI
INC HLI



// DEC_HI
DEC HI
// DEC_LI         // Decrement LI, set OVF if overflown, do not change HI, set ZERO if zeroed
DEC LI
// DEC_HLI
DEC HLI



// ZERO_HI    // set HI to 0, do not set ZERO flag
ZERO HI
// ZERO_LI    // set LI to 0, do not set ZERO flag
ZERO LI
// ZERO_HLI   // set HI and LI to 0, do not set ZERO flag
ZERO HLI



// SWAP_HI_LI // no flags set
SWP HI LI



// JUMP_IF_ZERO
JZE <16HEX>
JZE <label>



// JUMP_IF_OVERFLOW
JOF <16HEX>
JOF <label>



// JUMP_IF_ERROR
JER <16HEX>
JER <label>



// JUMP_IF_OK
JOK <16HEX>
JOK <label>



// JUMP
JMP <16HEX>
JMP <label>



// CALL                   // push flags, index registers and current PC to stack and jump to specified address 
CALL <16HEX>



// RETURN_OK              // pop flags, set the OK flag (do not pop ERR/OK flags) and set EXIT_CODE to 0, pop index registers and PC from stack and resume from PC
RET OK
// RETURN_OK_EXIT_CODE    // same as above but set EXIT_CODE to IMMEDIATE value
RET OK #<8HEX>
// RETURN_ERR             // pop flags, set the ERR flag (do not pop ERR/OK flags) and set EXIT_CODE to 0, pop index registers and PC from stack and resume from PC 
RET ERR
// RETURN_ERR_EXIT_CODE   // same as above but set EXIT_CODE to IMMEDIATE value
RET ERR #<8HEX>



// SET_ERR
SET ERR
// SET_IRQ // Enable interrupts
SET IRQ



// CLEAR_EXIT_CODE
CLR EX
// CLEAR_ERR
CLR ERR
// CLEAR_IRQ // Disable interrupts
CLR IRQ
// CLEAR_OVF
CLR OVF
// CLEAR_ZERO
CLR ZER



// HALT           // halt execution
HALT